//
//  CardReaderViewController.swift
//  IDCardReader
//
//  Created by Sharon Varghese on 28/03/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import DocumentReader
import Photos

protocol CardReaderDisplayLogic: AnyObject
{
    func displayInitializationProgress(progress: Float)
    func initializationCompletedSuccessfully()
    func initializationFailed(errorMessage: String)
    func displayResults(results: [Any])
}

class CardReaderViewController: UIViewController, CardReaderDisplayLogic
{
    // MARK: Properties
    var interactor: CardReaderBusinessLogic?
    var router: (NSObjectProtocol & CardReaderRoutingLogic & CardReaderDataPassing)?
    var results = [Any]()
    var imagePicker = UIImagePickerController()
    
    // MARK: @IBOutlet
    @IBOutlet weak var documentImageView: UIImageView!
    @IBOutlet weak var progressLabel: UILabel!
    @IBOutlet weak var chooseIDButton: UIButton!
    @IBOutlet weak var progressView: UIProgressView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CardReaderInteractor()
        let presenter = CardReaderPresenter()
        let router = CardReaderRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        registerTableView()
        interactor?.initializeCardReader()
        
    }
    func registerTableView() {
        tableView.estimatedRowHeight = 150
        tableView.register(UINib(nibName: "StringResultsTableViewCell", bundle: nil), forCellReuseIdentifier: StringResultsTableViewCell.reuseIdentifier)
        tableView.register(UINib(nibName: "DocumentImageTableViewCell", bundle: nil), forCellReuseIdentifier: DocumentImageTableViewCell.reuseIdentifier)
        tableView.register(UINib(nibName: "PortraitImageTableViewCell", bundle: nil), forCellReuseIdentifier: PortraitImageTableViewCell.reuseIdentifier)
        
    }
    func displayResults(results: [Any]) {
        self.results = results
        self.tableView.reloadData()
    }

    func displayInitializationProgress(progress: Float) {
        progressView.progress = progress
        progressLabel.text = "Initializing..."
    }
    func initializationCompletedSuccessfully() {
        progressLabel.isHidden = true
        chooseIDButton.isHidden = false
    }
    func initializationFailed(errorMessage: String) {
        progressLabel.isHidden = false
        chooseIDButton.isHidden = true
        progressLabel.text = errorMessage
    }
    @IBAction func readCardAction(_ sender: Any) {
        let optionMenu = UIAlertController(title: nil, message: "Choose ID Card", preferredStyle: .actionSheet)
        let takePhotoOption = UIAlertAction(title: "Take Photo", style: .default, handler: {
            (alert: UIAlertAction!) -> Void in
            self.takePhoto()
        })
        let chooseFromGallery = UIAlertAction(title: "Choose from Gallery", style: .default, handler: {
            (alert: UIAlertAction!) -> Void in
            self.choosePhoto()
        })
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: {
            (alert: UIAlertAction!) -> Void in
            print("Cancelled")
        })
        optionMenu.addAction(takePhotoOption)
        optionMenu.addAction(chooseFromGallery)
        optionMenu.addAction(cancelAction)
        self.present(optionMenu, animated: true, completion: nil)
    }
    
    func takePhoto() {
        
        DocReader.shared.showScanner(self) { (action, result, error) in
            if action == .complete {
                print("Completed")
                self.interactor?.handleDocumentReaderResults(results: result)
            } else if action == .processTimeout {
                print("Timeout")
                let timeoutLabel = UILabel(frame: self.view.bounds)
                timeoutLabel.text = "Timeout!"
                timeoutLabel.font = UIFont.systemFont(ofSize: 22, weight: .medium)
                timeoutLabel.textAlignment = .center
                self.view.addSubview(timeoutLabel)
                UIView.animate(withDuration: 2) {
                    timeoutLabel.alpha = 0
                } completion: { completion in
                    timeoutLabel.removeFromSuperview()
                    self.interactor?.handleDocumentReaderResults(results: result)
                }
            } else if action == .error {
                print("Error")
                guard let error = error else { return }
                print("Error string: \(error)")
            } else if action == .process {
                guard let result = result else { return }
                print("Scaning not finished. Result: \(result)")
            } else {
                guard let result = result else { return }
                print("Results: \(result), action: \(action)")
            }
            
        }
    }
    
    func choosePhoto() {
        PHPhotoLibrary.requestAuthorization { (status) in
            switch status {
            case .authorized:
                if UIImagePickerController.isSourceTypeAvailable(.savedPhotosAlbum){
                  DispatchQueue.main.async {
                    self.imagePicker.delegate = self
                    self.imagePicker.sourceType = .photoLibrary;
                    self.imagePicker.allowsEditing = false
                    self.imagePicker.navigationBar.tintColor = .black
                    self.present(self.imagePicker, animated: true, completion: nil)
                  }
                }
            case .denied:
                DispatchQueue.main.async {
                    let message = NSLocalizedString("Application doesn't have permission to use the camera, please change privacy settings", comment: "Alert message when the user has denied access to the gallery")
                    let alertController = UIAlertController(title: NSLocalizedString("Gallery Unavailable", comment: "Alert eror title"), message: message, preferredStyle: .alert)
                    alertController.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: "Alert manager, OK button tittle"), style: .cancel, handler: nil))
                    alertController.addAction(UIAlertAction(title: NSLocalizedString("Settings", comment: "Alert button to open Settings"), style: .default, handler: { action in
                        if #available(iOS 10.0, *) {
                            guard let settingsURL = URL(string: UIApplication.openSettingsURLString) else { return }
                            UIApplication.shared.open(settingsURL, options: convertToUIApplicationOpenExternalURLOptionsKeyDictionary([:]), completionHandler: nil)
                        } else {
                            UIApplication.shared.openURL(URL(string: UIApplication.openSettingsURLString)!)
                        }
                    }))
                    self.present(alertController, animated: true, completion: nil)
                }
                print("PHPhotoLibrary status: denied")
                break
            case .notDetermined:
                print("PHPhotoLibrary status: notDetermined")
            case .restricted:
                print("PHPhotoLibrary status: restricted")
            case .limited:
                print("PHPhotoLibrary status: limited")
            @unknown default:
                break
            }
        }
    }
}
// MARK: UITableViewDelegate, UITableViewDataSource
extension CardReaderViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return results.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let data = results[indexPath.row]
        switch data {
        case is StringResultsTableViewCellModel:
            if let cellData = data as? StringResultsTableViewCellModel {
                let cell = tableView.dequeueReusableCell(withIdentifier: StringResultsTableViewCell.reuseIdentifier, for: indexPath) as! StringResultsTableViewCell
                cell.data = cellData
                return cell
            }
        case is DocumentImageTableViewCellModel:
            if let cellData = data as? DocumentImageTableViewCellModel {
                let cell = tableView.dequeueReusableCell(withIdentifier: DocumentImageTableViewCell.reuseIdentifier, for: indexPath) as! DocumentImageTableViewCell
                cell.data = cellData
                return cell
            }
        case is PortraitImageTableViewCellModel:
            if let cellData = data as? PortraitImageTableViewCellModel {
                let cell = tableView.dequeueReusableCell(withIdentifier: PortraitImageTableViewCell.reuseIdentifier, for: indexPath) as! PortraitImageTableViewCell
                cell.data = cellData
                return cell
            }
        default:
            return UITableViewCell()
        }
        return UITableViewCell()
    }
    
    
}

// MARK: UIImagePickerControllerDelegate
extension CardReaderViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        let info = convertFromUIImagePickerControllerInfoKeyDictionary(info)

        if let image = info[convertFromUIImagePickerControllerInfoKey(UIImagePickerController.InfoKey.originalImage)] as? UIImage {
            self.dismiss(animated: true, completion: {

                DocReader.shared.recognizeImage(image, completion: { (action, result, error) in
                    if action == .complete {
                        if result != nil {
                            self.interactor?.handleDocumentReaderResults(results: result)
                        } else {
                            print("Completed without result")
                        }
                    } else if action == .error {
                        guard let error = error else { return }
                        print("Eror: \(error)")
                    }
                })

            })
        } else {
            self.dismiss(animated: true, completion: nil)
            print("Something went wrong")
        }
    }
}
// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertFromUIImagePickerControllerInfoKeyDictionary(_ input: [UIImagePickerController.InfoKey: Any]) -> [String: Any] {
    return Dictionary(uniqueKeysWithValues: input.map {key, value in (key.rawValue, value)})
}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertToUIApplicationOpenExternalURLOptionsKeyDictionary(_ input: [String: Any]) -> [UIApplication.OpenExternalURLOptionsKey: Any] {
    return Dictionary(uniqueKeysWithValues: input.map { key, value in (UIApplication.OpenExternalURLOptionsKey(rawValue: key), value)})
}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertFromUIImagePickerControllerInfoKey(_ input: UIImagePickerController.InfoKey) -> String {
    return input.rawValue
}
