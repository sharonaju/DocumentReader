//
//  CardReaderInteractor.swift
//  IDCardReader
//
//  Created by Sharon Varghese on 28/03/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import DocumentReader

protocol CardReaderBusinessLogic
{
    func initializeCardReader()
    func handleDocumentReaderResults(results: DocumentReaderResults?)
}

protocol CardReaderDataStore
{
  //var name: String { get set }
}

class CardReaderInteractor: CardReaderBusinessLogic, CardReaderDataStore
{
    
    var presenter: CardReaderPresentationLogic?
    var worker: CardReaderWorker?

    func handleDocumentReaderResults(results: DocumentReaderResults?) {
        guard let result = results else { return }
        var data = [Any]()
        let docImage = result.getGraphicFieldImageByType(fieldType: .gf_DocumentImage, source: .rawImage)
        let docImageModel = DocumentImageTableViewCellModel(image: docImage)
        data.append(docImageModel)
        let portraitImage = result.getGraphicFieldImageByType(fieldType: .gf_Portrait)
        let portraitImageModel = PortraitImageTableViewCellModel(title: "Portrait Image:", image: portraitImage)
        data.append(portraitImageModel)
        for textField in result.textResult.fields {
            for value in textField.values {
                
                let stringResult = StringResultsTableViewCellModel(title: "\(textField.fieldName):", value: value.value)
                data.append(stringResult)
            }
        }
        presenter?.displayResults(results: data)
    }
    
    func initializeCardReader() {
        guard let dataPath = Bundle.main.path(forResource: "regula.license", ofType: nil) else {
            print("licence nil")
            return }
        guard let licenseData = try? Data(contentsOf: URL(fileURLWithPath: dataPath)) else { return }
        DispatchQueue.global().async {
            DocReader.shared.prepareDatabase(databaseID: "Full", progressHandler: { [weak self](progress) in
                self?.presenter?.showProgressUpdate(progress: progress.fractionCompleted)
            }, completion: { [weak self](success, error) in
                if success {
                    let config = DocReader.Config(license: licenseData)
                    DocReader.shared.initializeReader(config: config) { (success, error) in
                        DispatchQueue.main.async {
                            if success {
                                DocReader.shared.processParams.scenario = "Ocr"
                                self?.presenter?.initializationCompletedSuccessfully()
                                
                            } else {
                                self?.presenter?.initializationFailed(reason: "Initialization error:\(error?.localizedDescription ?? "unknown")")
                            }
                        }
                    }
                } else {
                    DispatchQueue.main.async {
                        self?.presenter?.initializationFailed(reason: "Database error: error:\(error?.localizedDescription ?? "unknown")")
                    }
                }
            })
        }
    }

}
